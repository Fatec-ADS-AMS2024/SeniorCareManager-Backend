// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SeniorCareManager.WebAPI.Data;

#nullable disable

namespace SeniorCareManager.WebAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241004182059_Inital")]
    partial class Inital
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SeniorCareManager.WebAPI.Objects.Models.Carrier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressComplement")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("addresscomplement");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("CorporateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("corporatename");

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("cpfcnpj");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("district");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("number");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("postalcode");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("street");

                    b.Property<string>("TradeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tradename");

                    b.HasKey("Id");

                    b.ToTable("carrier");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressComplement = "Próximo ao banco",
                            City = "São Paulo",
                            CorporateName = "Transportes ABC LTDA",
                            CpfCnpj = "12345678000190",
                            District = "Centro",
                            Email = "contato@abctransportes.com",
                            Number = "123",
                            Phone = "11987654321",
                            PostalCode = "01001000",
                            State = "SP",
                            Street = "Rua das Flores",
                            TradeName = "ABC Transportes"
                        },
                        new
                        {
                            Id = 2,
                            AddressComplement = "Esquina com a Rua Augusta",
                            City = "São Paulo",
                            CorporateName = "Expresso XYZ S/A",
                            CpfCnpj = "98765432000180",
                            District = "Bela Vista",
                            Email = "expresso@xyz.com.br",
                            Number = "456",
                            Phone = "11976543210",
                            PostalCode = "01311000",
                            State = "SP",
                            Street = "Avenida Paulista",
                            TradeName = "Expresso XYZ"
                        },
                        new
                        {
                            Id = 3,
                            AddressComplement = "Próximo ao metrô",
                            City = "Rio de Janeiro",
                            CorporateName = "Translogística EFG ME",
                            CpfCnpj = "22334455000122",
                            District = "Centro",
                            Email = "contato@efgtrans.com.br",
                            Number = "789",
                            Phone = "21987654321",
                            PostalCode = "20040001",
                            State = "RJ",
                            Street = "Avenida Rio Branco",
                            TradeName = "EFG Transportes"
                        });
                });

            modelBuilder.Entity("SeniorCareManager.WebAPI.Objects.Models.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("productgroup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Medicamentos"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Equipamentos Médicos"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Suplementos"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
